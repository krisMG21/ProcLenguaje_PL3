# Generated from MiniB.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,399,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,90,8,2,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,98,8,3,1,4,1,4,1,4,1,4,3,4,104,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,3,5,112,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,124,
        8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,136,8,7,1,8,1,8,
        1,8,1,8,3,8,142,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,152,8,9,
        1,10,1,10,1,10,1,10,1,10,1,10,3,10,160,8,10,1,11,1,11,1,11,1,11,
        3,11,166,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,176,8,
        12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,188,8,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
        14,202,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
        15,214,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,3,16,232,8,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,3,17,242,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,
        18,250,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,260,8,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,269,8,20,1,21,1,21,1,21,
        1,21,1,21,1,21,3,21,277,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
        285,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,
        297,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
        1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,5,33,321,
        8,33,10,33,12,33,324,9,33,1,34,1,34,1,34,1,34,4,34,330,8,34,11,34,
        12,34,331,1,34,1,34,1,34,1,34,4,34,338,8,34,11,34,12,34,339,1,34,
        1,34,1,34,1,34,4,34,346,8,34,11,34,12,34,347,1,34,4,34,351,8,34,
        11,34,12,34,352,1,34,1,34,4,34,357,8,34,11,34,12,34,358,3,34,361,
        8,34,3,34,363,8,34,1,35,1,35,5,35,367,8,35,10,35,12,35,370,9,35,
        1,35,1,35,1,36,3,36,375,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        5,37,384,8,37,10,37,12,37,387,9,37,1,37,1,37,1,37,1,37,1,38,4,38,
        394,8,38,11,38,12,38,395,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        1,0,9,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,
        57,65,70,97,102,1,0,48,49,1,0,48,55,1,0,48,57,3,0,10,10,13,13,34,
        34,2,0,10,10,13,13,2,0,9,9,32,32,435,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,89,1,0,0,0,7,97,1,
        0,0,0,9,103,1,0,0,0,11,111,1,0,0,0,13,123,1,0,0,0,15,135,1,0,0,0,
        17,141,1,0,0,0,19,151,1,0,0,0,21,159,1,0,0,0,23,165,1,0,0,0,25,175,
        1,0,0,0,27,187,1,0,0,0,29,201,1,0,0,0,31,213,1,0,0,0,33,231,1,0,
        0,0,35,241,1,0,0,0,37,249,1,0,0,0,39,259,1,0,0,0,41,268,1,0,0,0,
        43,276,1,0,0,0,45,284,1,0,0,0,47,296,1,0,0,0,49,298,1,0,0,0,51,300,
        1,0,0,0,53,302,1,0,0,0,55,305,1,0,0,0,57,308,1,0,0,0,59,310,1,0,
        0,0,61,312,1,0,0,0,63,314,1,0,0,0,65,316,1,0,0,0,67,318,1,0,0,0,
        69,362,1,0,0,0,71,364,1,0,0,0,73,374,1,0,0,0,75,378,1,0,0,0,77,393,
        1,0,0,0,79,80,5,40,0,0,80,2,1,0,0,0,81,82,5,41,0,0,82,4,1,0,0,0,
        83,84,5,78,0,0,84,85,5,79,0,0,85,90,5,84,0,0,86,87,5,110,0,0,87,
        88,5,111,0,0,88,90,5,116,0,0,89,83,1,0,0,0,89,86,1,0,0,0,90,6,1,
        0,0,0,91,92,5,65,0,0,92,93,5,78,0,0,93,98,5,68,0,0,94,95,5,97,0,
        0,95,96,5,110,0,0,96,98,5,100,0,0,97,91,1,0,0,0,97,94,1,0,0,0,98,
        8,1,0,0,0,99,100,5,79,0,0,100,104,5,82,0,0,101,102,5,111,0,0,102,
        104,5,114,0,0,103,99,1,0,0,0,103,101,1,0,0,0,104,10,1,0,0,0,105,
        106,5,76,0,0,106,107,5,69,0,0,107,112,5,84,0,0,108,109,5,108,0,0,
        109,110,5,101,0,0,110,112,5,116,0,0,111,105,1,0,0,0,111,108,1,0,
        0,0,112,12,1,0,0,0,113,114,5,80,0,0,114,115,5,82,0,0,115,116,5,73,
        0,0,116,117,5,78,0,0,117,124,5,84,0,0,118,119,5,112,0,0,119,120,
        5,114,0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,124,5,116,0,0,
        123,113,1,0,0,0,123,118,1,0,0,0,124,14,1,0,0,0,125,126,5,73,0,0,
        126,127,5,78,0,0,127,128,5,80,0,0,128,129,5,85,0,0,129,136,5,84,
        0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,133,5,112,0,0,133,134,
        5,117,0,0,134,136,5,116,0,0,135,125,1,0,0,0,135,130,1,0,0,0,136,
        16,1,0,0,0,137,138,5,73,0,0,138,142,5,70,0,0,139,140,5,105,0,0,140,
        142,5,102,0,0,141,137,1,0,0,0,141,139,1,0,0,0,142,18,1,0,0,0,143,
        144,5,69,0,0,144,145,5,76,0,0,145,146,5,83,0,0,146,152,5,69,0,0,
        147,148,5,101,0,0,148,149,5,108,0,0,149,150,5,115,0,0,150,152,5,
        101,0,0,151,143,1,0,0,0,151,147,1,0,0,0,152,20,1,0,0,0,153,154,5,
        70,0,0,154,155,5,79,0,0,155,160,5,82,0,0,156,157,5,102,0,0,157,158,
        5,111,0,0,158,160,5,114,0,0,159,153,1,0,0,0,159,156,1,0,0,0,160,
        22,1,0,0,0,161,162,5,84,0,0,162,166,5,79,0,0,163,164,5,116,0,0,164,
        166,5,111,0,0,165,161,1,0,0,0,165,163,1,0,0,0,166,24,1,0,0,0,167,
        168,5,78,0,0,168,169,5,69,0,0,169,170,5,88,0,0,170,176,5,84,0,0,
        171,172,5,110,0,0,172,173,5,101,0,0,173,174,5,120,0,0,174,176,5,
        116,0,0,175,167,1,0,0,0,175,171,1,0,0,0,176,26,1,0,0,0,177,178,5,
        87,0,0,178,179,5,72,0,0,179,180,5,73,0,0,180,181,5,76,0,0,181,188,
        5,69,0,0,182,183,5,119,0,0,183,184,5,104,0,0,184,185,5,105,0,0,185,
        186,5,108,0,0,186,188,5,101,0,0,187,177,1,0,0,0,187,182,1,0,0,0,
        188,28,1,0,0,0,189,190,5,82,0,0,190,191,5,69,0,0,191,192,5,80,0,
        0,192,193,5,69,0,0,193,194,5,65,0,0,194,202,5,84,0,0,195,196,5,114,
        0,0,196,197,5,101,0,0,197,198,5,112,0,0,198,199,5,101,0,0,199,200,
        5,97,0,0,200,202,5,116,0,0,201,189,1,0,0,0,201,195,1,0,0,0,202,30,
        1,0,0,0,203,204,5,85,0,0,204,205,5,78,0,0,205,206,5,84,0,0,206,207,
        5,73,0,0,207,214,5,76,0,0,208,209,5,117,0,0,209,210,5,110,0,0,210,
        211,5,116,0,0,211,212,5,105,0,0,212,214,5,108,0,0,213,203,1,0,0,
        0,213,208,1,0,0,0,214,32,1,0,0,0,215,216,5,67,0,0,216,217,5,79,0,
        0,217,218,5,78,0,0,218,219,5,84,0,0,219,220,5,73,0,0,220,221,5,78,
        0,0,221,222,5,85,0,0,222,232,5,69,0,0,223,224,5,99,0,0,224,225,5,
        111,0,0,225,226,5,110,0,0,226,227,5,116,0,0,227,228,5,105,0,0,228,
        229,5,110,0,0,229,230,5,117,0,0,230,232,5,101,0,0,231,215,1,0,0,
        0,231,223,1,0,0,0,232,34,1,0,0,0,233,234,5,69,0,0,234,235,5,88,0,
        0,235,236,5,73,0,0,236,242,5,84,0,0,237,238,5,101,0,0,238,239,5,
        120,0,0,239,240,5,105,0,0,240,242,5,116,0,0,241,233,1,0,0,0,241,
        237,1,0,0,0,242,36,1,0,0,0,243,244,5,69,0,0,244,245,5,78,0,0,245,
        250,5,68,0,0,246,247,5,101,0,0,247,248,5,110,0,0,248,250,5,100,0,
        0,249,243,1,0,0,0,249,246,1,0,0,0,250,38,1,0,0,0,251,252,5,84,0,
        0,252,253,5,72,0,0,253,254,5,69,0,0,254,260,5,78,0,0,255,256,5,116,
        0,0,256,257,5,104,0,0,257,258,5,101,0,0,258,260,5,110,0,0,259,251,
        1,0,0,0,259,255,1,0,0,0,260,40,1,0,0,0,261,262,5,77,0,0,262,263,
        5,79,0,0,263,269,5,68,0,0,264,265,5,109,0,0,265,266,5,111,0,0,266,
        269,5,100,0,0,267,269,5,37,0,0,268,261,1,0,0,0,268,264,1,0,0,0,268,
        267,1,0,0,0,269,42,1,0,0,0,270,271,5,86,0,0,271,272,5,65,0,0,272,
        277,5,76,0,0,273,274,5,118,0,0,274,275,5,97,0,0,275,277,5,108,0,
        0,276,270,1,0,0,0,276,273,1,0,0,0,277,44,1,0,0,0,278,279,5,76,0,
        0,279,280,5,69,0,0,280,285,5,78,0,0,281,282,5,108,0,0,282,283,5,
        101,0,0,283,285,5,110,0,0,284,278,1,0,0,0,284,281,1,0,0,0,285,46,
        1,0,0,0,286,287,5,73,0,0,287,288,5,83,0,0,288,289,5,78,0,0,289,290,
        5,65,0,0,290,297,5,78,0,0,291,292,5,105,0,0,292,293,5,115,0,0,293,
        294,5,110,0,0,294,295,5,97,0,0,295,297,5,110,0,0,296,286,1,0,0,0,
        296,291,1,0,0,0,297,48,1,0,0,0,298,299,5,60,0,0,299,50,1,0,0,0,300,
        301,5,62,0,0,301,52,1,0,0,0,302,303,5,60,0,0,303,304,5,61,0,0,304,
        54,1,0,0,0,305,306,5,62,0,0,306,307,5,61,0,0,307,56,1,0,0,0,308,
        309,5,61,0,0,309,58,1,0,0,0,310,311,5,43,0,0,311,60,1,0,0,0,312,
        313,5,45,0,0,313,62,1,0,0,0,314,315,5,42,0,0,315,64,1,0,0,0,316,
        317,5,47,0,0,317,66,1,0,0,0,318,322,7,0,0,0,319,321,7,1,0,0,320,
        319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,
        68,1,0,0,0,324,322,1,0,0,0,325,326,5,48,0,0,326,327,5,120,0,0,327,
        329,1,0,0,0,328,330,7,2,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,
        329,1,0,0,0,331,332,1,0,0,0,332,363,1,0,0,0,333,334,5,48,0,0,334,
        335,5,98,0,0,335,337,1,0,0,0,336,338,7,3,0,0,337,336,1,0,0,0,338,
        339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,363,1,0,0,0,341,
        342,5,48,0,0,342,343,5,111,0,0,343,345,1,0,0,0,344,346,7,4,0,0,345,
        344,1,0,0,0,346,347,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
        363,1,0,0,0,349,351,7,5,0,0,350,349,1,0,0,0,351,352,1,0,0,0,352,
        350,1,0,0,0,352,353,1,0,0,0,353,360,1,0,0,0,354,356,5,46,0,0,355,
        357,7,5,0,0,356,355,1,0,0,0,357,358,1,0,0,0,358,356,1,0,0,0,358,
        359,1,0,0,0,359,361,1,0,0,0,360,354,1,0,0,0,360,361,1,0,0,0,361,
        363,1,0,0,0,362,325,1,0,0,0,362,333,1,0,0,0,362,341,1,0,0,0,362,
        350,1,0,0,0,363,70,1,0,0,0,364,368,5,34,0,0,365,367,8,6,0,0,366,
        365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,
        371,1,0,0,0,370,368,1,0,0,0,371,372,5,34,0,0,372,72,1,0,0,0,373,
        375,5,13,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,
        377,5,10,0,0,377,74,1,0,0,0,378,379,5,82,0,0,379,380,5,69,0,0,380,
        381,5,77,0,0,381,385,1,0,0,0,382,384,8,7,0,0,383,382,1,0,0,0,384,
        387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,
        385,1,0,0,0,388,389,3,73,36,0,389,390,1,0,0,0,390,391,6,37,0,0,391,
        76,1,0,0,0,392,394,7,8,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,393,
        1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,398,6,38,0,0,398,78,
        1,0,0,0,35,0,89,97,103,111,123,135,141,151,159,165,175,187,201,213,
        231,241,249,259,268,276,284,296,322,331,339,347,352,358,360,362,
        368,374,385,395,1,6,0,0
    ]

class MiniBLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    NOT = 3
    AND = 4
    OR = 5
    LET = 6
    PRINT = 7
    INPUT = 8
    IF = 9
    ELSE = 10
    FOR = 11
    TO = 12
    NEXT = 13
    WHILE = 14
    REPEAT = 15
    UNTIL = 16
    CONTINUE = 17
    EXIT = 18
    END = 19
    THEN = 20
    MOD = 21
    VAL = 22
    LEN = 23
    ISNAN = 24
    LT = 25
    GT = 26
    LE = 27
    GE = 28
    EQ = 29
    PLUS = 30
    MINUS = 31
    MUL = 32
    DIV = 33
    ID = 34
    NUMBER = 35
    STRING_LITERAL = 36
    NEWLINE = 37
    COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'<'", "'>'", "'<='", "'>='", "'='", "'+'", "'-'", 
            "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "NOT", "AND", "OR", "LET", "PRINT", "INPUT", "IF", "ELSE", "FOR", 
            "TO", "NEXT", "WHILE", "REPEAT", "UNTIL", "CONTINUE", "EXIT", 
            "END", "THEN", "MOD", "VAL", "LEN", "ISNAN", "LT", "GT", "LE", 
            "GE", "EQ", "PLUS", "MINUS", "MUL", "DIV", "ID", "NUMBER", "STRING_LITERAL", 
            "NEWLINE", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "NOT", "AND", "OR", "LET", "PRINT", "INPUT", 
                  "IF", "ELSE", "FOR", "TO", "NEXT", "WHILE", "REPEAT", 
                  "UNTIL", "CONTINUE", "EXIT", "END", "THEN", "MOD", "VAL", 
                  "LEN", "ISNAN", "LT", "GT", "LE", "GE", "EQ", "PLUS", 
                  "MINUS", "MUL", "DIV", "ID", "NUMBER", "STRING_LITERAL", 
                  "NEWLINE", "COMMENT", "WS" ]

    grammarFileName = "MiniB.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


